; ---------------------------------------------------------------------------
; Enemy Bee object code (source name "hachi")
; ---------------------------------------------------------------------------
; local enums

bee.Timer    =  $32
bee.Flags    =  $34
missile.Parent  =  $3C

; ---------------------------------------------------------------------------

objEnemyBee:
	moveq   #0,d0
	move.b  obj.Action(a0),d0
	move.w  .Index(pc,d0.w),d1
	jmp     .Index(pc,d1.w)

; ---------------------------------------------------------------------------
.Index:
	dc.w Bee_Init-.Index
	dc.w Bee_Main-.Index
	dc.w Bee_Done-.Index
; ---------------------------------------------------------------------------

Bee_Init:
	addq.b  #2,obj.Action(a0) ; Increment action to Main loop
	move.l  #SprPat_Bee,obj.Pat(a0) ; Init sprite mappings and properties
	move.w  #$444,obj.Tile(a0)
	move.b  #4,obj.Render(a0)
	move.b  #3,obj.Priority(a0)
	move.b  #8,obj.Collision(a0)
	move.b  #24,obj.XRender(a0)

Bee_Main:
	moveq   #0,d0
	move.b  obj.SubAction(a0),d0 ; Set up subaction table
	move.w  .Subdex(pc,d0.w),d1
	jsr     .Subdex(pc,d1.w)
	lea     (AniSpr_Bee).l,a1
	bsr.w   _objectAnimate
	bra.w   _objectChkOffscreen

; ---------------------------------------------------------------------------
.Subdex:
	dc.w Bee_ChkFire-.Subdex
	dc.w Bee_Proximity-.Subdex
; ---------------------------------------------------------------------------

Bee_ChkFire:
	subq.w  #1,bee.Timer(a0)
	bpl.s   .Wait
	btst    #1,bee.Flags(a0)
	bne.s   .FireMissile
	addq.b  #2,obj.SubAction(a0)
	move.w  #128-1,bee.Timer(a0)
	move.w  #$400,obj.XSpeed(a0)
	move.b  #1,obj.Anim(a0)
	btst    #0,obj.Status(a0)
	bne.s   .Wait
	neg.w   obj.XSpeed(a0)

.Wait:
	rts

.FireMissile:
	bsr.w   _objectFindFreeSlot
	bne.s   .NoSlot
	move.b  #$23,obj.No(a1) ; '#'
	move.w  obj.X(a0),obj.X(a1)
	move.w  obj.Y(a0),obj.Y(a1)
	addi.w  #28,obj.Y(a1)
	move.w  #$200,obj.YSpeed(a1)
	move.w  #$200,obj.XSpeed(a1)
	move.w  #$18,d0
	btst    #0,obj.Status(a0)
	bne.s   .DontFlip
	neg.w   d0
	neg.w   obj.XSpeed(a1)

.DontFlip:
	add.w   d0,obj.X(a1)
	move.b  obj.Status(a0),obj.Status(a1)
	move.w  #15-1,bee.Timer(a1)
	move.l  a0,missile.Parent(a1)
	move.b  #1,bee.Flags(a0)
	move.w  #60-1,bee.Timer(a0)
	move.b  #2,obj.Anim(a0)

.NoSlot:
	rts

Bee_Proximity:
	subq.w  #1,bee.Timer(a0)
	bmi.s   .TimerDepleted
	bsr.w   _objectSetSpeed
	tst.b   bee.Flags(a0)
	bne.s   .Exit
	move.w  (objSlot00+8).w,d0
	sub.w   obj.X(a0),d0
	bpl.s   .ProxPositive
	neg.w   d0              ; abs. value?

.ProxPositive:
	cmpi.w  #$60,d0 ; '`'
	bcc.s   .Exit
	tst.b   obj.Render(a0)
	bpl.s   .Exit
	move.b  #2,bee.Flags(a0)
	move.w  #$1D,bee.Timer(a0)
	bra.s   .Stop

.TimerDepleted:
	move.b  #0,bee.Flags(a0)
	bchg    #0,obj.Status(a0)
	move.w  #60-1,bee.Timer(a0)

.Stop:
	subq.b  #2,obj.SubAction(a0)
	move.w  #0,obj.XSpeed(a0)
	move.b  #0,obj.Anim(a0)

.Exit:
	rts

Bee_Done:
	bsr.w   _objectDelete
	rts


; ---------------------------------------------------------------------------
; Missile object
; ---------------------------------------------------------------------------
; local enums

missile.Timer   =  $32
missile.Parent  =  $3C

; ---------------------------------------------------------------------------

objMissile:
	moveq   #0,d0
	move.b  obj.Action(a0),d0
	move.w  .Index(pc,d0.w),d1
	jmp     .Index(pc,d1.w)

; ---------------------------------------------------------------------------
.Index:
	dc.w Missile_Init-*
	dc.w Missile_Bee-.Index
	dc.w Missile_Move-.Index
	dc.w Missile_Done-.Index
	dc.w Missile_Chameleon-.Index
; ---------------------------------------------------------------------------

Missile_Init:
	subq.w  #1,missile.Timer(a0) ; Decrement parent timer
	bpl.s   .ChkParentState ; If positive, branch to exit
	addq.b  #2,obj.Action(a0) ; Setup properties
	move.l  #MapSpr_Missile,obj.Pat(a0)
	move.w  #$2444,obj.Tile(a0)
	move.b  #4,obj.Render(a0)
	move.b  #3,obj.Priority(a0)
	move.b  #8,obj.XRender(a0)
	andi.b  #3,obj.Status(a0)
	tst.b   obj.Args(a0)
	beq.s   Missile_Bee
	move.b  #8,obj.Action(a0)
	move.b  #$87,obj.Collision(a0)
	move.b  #1,obj.Anim(a0)
	bra.s   .MeleonParent

Missile_Bee:
	bsr.s   .ChkParentState
	lea     (AniSpr_Missile).l,a1
	bsr.w   _objectAnimate
	bra.w   _objectDraw

.ChkParentState:
	movea.l missile.Parent(a0),a1 ; Get parent
	cmpi.b  #OBJNO_LIGHTEXPL,obj.No(a1) ; Check if parent is now an explosion
	beq.s   Missile_Done    ; Kill if so
	rts

Missile_Move:
	btst    #7,obj.Status(a0)
	bne.s   .Explode
	move.b  #$87,obj.Collision(a0)
	move.b  #1,obj.Anim(a0)
	bsr.w   _objectSetSpeed
	lea     (AniSpr_Missile).l,a1
	bsr.w   _objectAnimate
	bsr.w   _objectDraw
	move.w  (limitADown).w,d0
	addi.w  #$E0,d0
	cmp.w   obj.Y(a0),d0
	bcs.s   Missile_Done
	rts

.Explode:
	move.b  #OBJNO_BOMBHIT,obj.No(a0)
	move.b  #0,obj.Action(a0)
	bra.w   ObjBombHit

Missile_Done:
	bsr.w   _objectDelete
	rts

Missile_Chameleon:
	tst.b   obj.Render(a0)
	bpl.s   Missile_Done
	bsr.w   _objectSetSpeed

.MeleonParent:
	lea     (AniSpr_Missile).l,a1
	bsr.w   _objectAnimate
	bsr.w   _objectDraw
	rts