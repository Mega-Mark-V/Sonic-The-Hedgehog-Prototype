; ---------------------------------------------------------------------------
; VBLANK and HBLANK Interrupts 
; IRQ Level 4 (H) and 6 (V) autovectors (generated by the VDP itself)
; ---------------------------------------------------------------------------

; ---------------------------------------------------------------------------
; VBLANK Main handler
; User functions are handled through a command ID which provides an index
; entry * 2 for its offset
; ---------------------------------------------------------------------------

VBLANK:                                 
        movem.l d0-d7/a0-a6,-(sp)
        tst.b   vblankCmd.w           ; If no command given, exit
        beq.s   .End
        move.w  VDPCTRL,d0
        move.l  #VSRAMWRITE,VDPCTRL
        move.l  mainAPosY.w,VDPDATA

        btst    #6,hardwareVersion.w  ; Get hardware region
        beq.s   .NTSC                 ; Skip if NTSC
        move.w  #$700,d0              ; Wait for PAL timing               
        dbf     d0,*                    
.NTSC:                                 
        move.b  vblankCmd.w,d0        ; Get user command
        move.b  #0,vblankCmd.w        ; Clear command variable
        move.w  #1,hblankFlag.w       ; Reset the HBLANK exec. flag
        andi.w  #%111110,d0
        move.w  .Index(pc,d0.w),d0    ; Jump to execution
        jsr     .Index(pc,d0.w)

.End:                                  
        addq.l  #1,vblankCntr.w
        jsr     UpdateMusic
        movem.l (sp)+,d0-d7/a0-a6
        rte

; ---------------------------------------------------------------------------
; Macro for generating VBLANK command entries
; Requires local ".Index" label.
; ---------------------------------------------------------------------------

VBLANKCMD macro   addr, id
        dc.w    \addr-.Index
        \id:     rs.b    2
        endm

; ---------------------------------------------------------------------------

.NULL                                
        rts

; ---------------------------------------------------------------------------

.Index:                                
        VBLANKCMD .NULL,                VBCMD_NULL
        VBLANKCMD VBLANK_LOGO,          VBCMD_LOGO
        VBLANKCMD VBLANK_TITLE,         VBCMD_TITLE
        VBLANKCMD VBLANK_UNK,           VBCMD_UNK
        VBLANKCMD VBLANK_LEVEL,         VBCMD_LEVEL
        VBLANKCMD VBLANK_SPECIAL,       VBCMD_SPECIAL
        VBLANKCMD VBLANK_LVLSTART,      VBCMD_LVLSTART
        VBLANKCMD VBLANK_TIMER,         VBCMD_TIMER
        VBLANKCMD VBLANK_PAUSE,         VBCMD_PAUSE
        VBLANKCMD VBLANK_PALETTE,       VBCMD_PALETTE

; ---------------------------------------------------------------------------
; LOGO / SEGA Screen routine
; ---------------------------------------------------------------------------

VBLANK_LOGO:                                
        bsr.w   _vblVDPRefresh
        tst.w   genericTimer.w
        beq.w   .Exit
        subq.w  #1,genericTimer.w

.Exit:                             
        rts

; ---------------------------------------------------------------------------
; TITLE Screen routine
; ---------------------------------------------------------------------------

VBLANK_TITLE:                               
        bsr.w   _vblVDPRefresh
        bsr.w   _titleDrawCams
        bsr.w   DecompArtList.Fast
        tst.w   genericTimer.w
        beq.w   .Exit
        subq.w  #1,genericTimer.w

.Exit:                             
        rts

; ---------------------------------------------------------------------------
; Unknown basic routine
; ---------------------------------------------------------------------------

VBLANK_UNK:                               
        bsr.w   _vblVDPRefresh
        rts

; ---------------------------------------------------------------------------
; PAUSE routine
; ---------------------------------------------------------------------------

VBLANK_PAUSE:                               
        cmpi.b  #GAMEMD_SPECIAL,gamemode.w
        beq.w   VBLANK_SPECIAL

; ---------------------------------------------------------------------------
; LEVEL main routine (Post-load, when in level gameplay)
; ---------------------------------------------------------------------------

VBLANK_LEVEL:                           
        bsr.w   ReadJoypads
        move.w  #$100,Z80BUS

.WaitZ80:                              
        btst    #0,Z80BUS
        bne.s   .WaitZ80

        VDPDMA  palette,$0000,$80,CRAM,a5     ; Palette DMA
        VDPDMA  hscroll,$FC00,$380,VRAM,a5    ; Hscroll DMA

        move.w  #$8407,a5
        move.w  hblankLine.w,a5
        move.w  mainZPosY.w,vdpUnkPos.w

        VDPDMA  sprites,$F800,$280,VRAM,a5    ; Sprite DMA

        tst.b   sonicRedrawFlag.w
        beq.s   .NoSonicRedraw

        VDPDMA  playDMABuffer,$F000,$2E0,VRAM,a5 ; Sonic art DMA

        move.b  #0,sonicRedrawFlag.w

.NoSonicRedraw:                                
        move.w  #0,Z80BUS

        bsr.w   DrawCameras
        jsr     AnimatedLevelGFX
        jsr     UpdateHUD
        bsr.w   DecompArtList.Slow

        moveq   #0,d0
        move.b  vblankUnk1.w,d0
        move.b  vblankUnk2.w,d1
        cmp.b   d0,d1
        bcc.s   .Skip
        move.b  d0,vblankUnk2.w

.Skip:                                
        move.b  #0,vblankUnk1.w
        tst.w   genericTimer.w
        beq.w   .Exit
        subq.w  #1,genericTimer.w

.Exit:                             
        rts


; ---------------------------------------------------------------------------
; SPECIAL stage routine
; ---------------------------------------------------------------------------

VBLANK_SPECIAL:                             
        bsr.w   ReadJoypads
        move.w  #$100,Z80BUS

.WaitZ80:                                
        btst    #0,Z80BUS
        bne.s   .WaitZ80

        VDPDMA  palette,$0000,$80,CRAM,a5     ; Palette DMA
        VDPDMA  sprites,$F800,$280,VRAM,a5    ; Sprite DMA
        VDPDMA  hscroll,$FC00,$380,VRAM,a5    ; Hscroll DMA

        move.w  #0,Z80BUS
        bsr.w   _specialstgPalCyc

        tst.b   sonicRedrawFlag.w
        beq.s   .NoSonicRedraw

        VDPDMA  playDMABuffer,$F000,$2E0,VRAM,a5 ; Sonic art DMA

        move.b  #0,sonicRedrawFlag.w

.NoSonicRedraw:                                
        tst.w   genericTimer.w
        beq.w   .TimerDone
        subq.w  #1,genericTimer.w

.TimerDone:                             
        rts


; ---------------------------------------------------------------------------
; LEVEL starting routine
; ---------------------------------------------------------------------------

VBLANK_LVLSTART:                          
        bsr.w   ReadJoypads
        move.w  #$100,Z80BUS

.WaitZ80:                              
        btst    #0,Z80BUS
        bne.s   .WaitZ80
        VDPDMA  palette,$0000,$80,CRAM,a5               ; Palette DMA
        VDPDMA  sprites,$F800,$280,VRAM,a5              ; Sprite DMA
        VDPDMA  hscroll,$FC00,$380,VRAM,a5              ; Hscroll DMA
        tst.b   sonicRedrawFlag.w
        beq.s   .NoSonicRedraw
        VDPDMA  playDMABuffer,$F000,$2E0,VRAM,a5       ; Sonic art DMA
        move.b  #0,sonicRedrawFlag.w

.NoSonicRedraw:                        
        move.w  #0,Z80BUS
        bsr.w   DrawCameras
        jsr     AnimatedLevelGFX
        jsr     UpdateHUD
        bsr.w   DecompArtList.Fast
        rts

; ---------------------------------------------------------------------------
; Unused routine that increments a timer. 
; Pieces of it remain above in VBLANK_LEVEL. Usage unknown.
; ---------------------------------------------------------------------------

VBLANK_TIMER:                                 
        bsr.w   _vblVDPRefresh
        bsr.w   RunObjects
        bsr.w   DrawObjects
        addq.b  #1,vblankUnk1.w
        move.b  #VBCMD_TIMER,vblankCmd.w
        rts

; ---------------------------------------------------------------------------
; Idle routine for palette functions, like fading in and out
; ---------------------------------------------------------------------------

VBLANK_PALETTE:                             
        bsr.w   _vblVDPRefresh
        bra.w   DecompArtList.Fast

; ---------------------------------------------------------------------------
; Refresh VDP tile/sprite data with most recent buffer data in memory
; ---------------------------------------------------------------------------

_vblVDPRefresh:                      
        bsr.w   ReadJoypads
        move.w  #$100,Z80BUS

.WaitZ80:                              
        btst    #0,Z80BUS
        bne.s   .WaitZ80

        VDPDMA  palette,$0000,$80,CRAM,a5        ; Palette DMA
        VDPDMA  sprites,$F800,$280,VRAM,a5       ; Sprite DMA
        VDPDMA  hscroll,$FC00,$380,VRAM,a5       ; Hscroll DMA

        move.w  #0,Z80BUS
        rts

; ---------------------------------------------------------------------------
; HBLANK Routines
; ---------------------------------------------------------------------------
; Early implementation of the water mid-screen palette swap, which uses DMA
; The final game uses manual writes to VDPDATA which is quicker
; due to requiring less setup
; ---------------------------------------------------------------------------


HBLANK:                                 
        tst.w   hblankFlag.w
        beq.s   .Exit
        move.l  a5,-(sp)
        VDPDMA  fadingPalette,$0000,$80,CRAM,a5  ; Palette DMA
        movem.l (sp)+,a5
        move.w  #0,hblankFlag.w                  ; Set as executed

.Exit:                                 
        rte

; ---------------------------------------------------------------------------
; Unused earlier HBLANK routine
; This swaps the background nametable and rewrites the sprite table
; This was likely intended for either parallax or water effects
; ---------------------------------------------------------------------------

UNUSED_HBLANK2:
        tst.w   hblankFlag.w
        beq.s   .Exit
        movem.l d0/a0/a5,-(sp)
        move.w  #0,hblankFlag.w
        move.w  #$8405,VDPCTRL
        move.w  #$857C,VDPCTRL
        move.l  #$78000003,VDPCTRL
        lea     sprites.w,a0
        lea     VDPDATA,a5
        move.w  #$A0-1,d0

.WriteSprites:                         
        move.l  (a0)+,(a5)
        dbf     d0,.WriteSprites
        movem.l (sp)+,d0/a0/a5
.Exit:                                 
        rte
 
