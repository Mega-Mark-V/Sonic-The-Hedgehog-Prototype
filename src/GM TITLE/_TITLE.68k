; ---------------------------------------------------------------------------
; TITLE Screen (And level select) Main Program 
; ---------------------------------------------------------------------------

GM_TITLE:                               
        bsr.w   ClearArtListQueue
        bsr.w   PalFadeOut
        lea     VDPCTRL,a6
        move.w  #$8004,(a6)
        move.w  #$8200+($C000>>10),(a6)         ; Set Plane A nametable addr.
        move.w  #$8407+($E000>>13),(a6)         ; Set Plane B nametable addr.
        move.w  #$9001,(a6)                     ; Set 512x256 plane res.
        move.w  #$9200,(a6)                     ; Clear Window Y-pos
        move.w  #$8B03,(a6)                     ; Set HScroll to per-line
        move.w  #$8720,(a6)                    
        move.w  displayMode.w,d0
        andi.b  #%10111111,d0
        move.w  d0,VDPCTRL
        bsr.w   InitScreen

        lea     OBJECTRAM.w,a1
        moveq   #0,d0
        move.w  #(OBJECTRAMSZ/4)-1,d1

.ClearObjects:                         
        move.l  d0,(a1)+
        dbf     d1,.ClearObjects

        VDPCMD  move.l,$4000,VRAM,WRITE,VDPCTRL
        lea     ArtNem_TitleEmblem,a0
        bsr.w   NemDec

        VDPCMD  move.l,$6000,VRAM,WRITE,VDPCTRL
        lea     ArtNem_TitleSonic,a0
        bsr.w   NemDec

        lea     VDPDATA,a6
        VDPCMD  move.l,$D000,VRAM,WRITE,VDPCTRL-VDPDATA(a6)
        lea     ArtUnc_Text,a5
        move.w  #$28F,d1

.LoadText:                             
        move.w  (a5)+,(a6)
        dbf     d1,.LoadText

        lea     MapScr_TitleScreen,a1
        VDPCMD  move.l,$C206,VRAM,WRITE,d0
        moveq   #34-1,d1
        moveq   #22-1,d2
        bsr.w   DrawTileMap

        move.w  #0,editMode.w
        move.w  #0,demo.w
        move.w  #0,zone.w
        bsr.w   InitBoundries
        bsr.w   Parallax

        ; For Using Green Hill Zone's art here-
        ; The art files for the zone are split 
        ; so that they can be used for the background here

        VDPCMD  move.l,$0000,VRAM,WRITE,VDPCTRL
        lea     ArtNem_GreenHill1,a0            ; Load GHZ tileset #1
        bsr.w   NemDec

        lea     MapBlks_GreenHill,a0            ; Load GHZ blocks
        lea     levelBlocks.w,a4
        move.w  #$5FF,d0

.LoadBlks:                           
        move.l  (a0)+,(a4)+
        dbf     d0,.LoadBlks

        lea     MapChnks_GHZ,a0                 ; Load GHZ chunks
        lea     levelChunks,a1
        bsr.w   KosDec

        bsr.w   InitLevelLayout
        lea     VDPCTRL,a5
        lea     VDPDATA,a6
        lea     cameraBPosX.w,a3
        lea     levelLayout+$40.w,a4
        move.w  #$6000,d2
        bsr.w   DrawChunks

        moveq   #1,d0
        bsr.w   PalQueueForFade

        move.b  #musID.Title,d0
        bsr.w   QueueSoundB

        move.b  #0,debug.w
        move.w  #376,genericTimer.w

        move.b  #OBJID.TITLESONIC,objSlot01.w   ; Set Title Sonic obj.
        move.b  #OBJID.TITLEMISC,objSlot02.w    ; Set "PRESS START BUTTON" obj.
        move.b  #OBJID.TITLEMISC,objSlot03.w    ; Set same object
        move.b  #2,objSlot03+obj.Frame.w        ; Set as sprite mask for Sonic
        
        moveq   #0,d0
        bsr.w   InitArtList

        move.w  displayMode.w,d0                ; Enable display
        ori.b   #$40,d0
        move.w  d0,VDPCTRL 

        bsr.w   PalFadeIn                       ; Fade palette in

.MainLoop:                      
        move.b  #vbID_TITLE,vblankCmd.w
        bsr.w   VSync
        bsr.w   RunObjects
        bsr.w   CameraScroll
        bsr.w   DrawObjects
        bsr.w   _titleDoPalCyc
        bsr.w   ProcessArtLoading
        move.w  (objSlot00+8).w,d0
        addq.w  #2,d0
        move.w  d0,(objSlot00+8).w
        cmpi.w  #$1C00,d0
        bcs.s   .NotDone
        move.b  #0,(gamemode).w
        rts
; ---------------------------------------------------------------------------

.NotDone:                              
                tst.w   genericTimer.w
                beq.w   _titleAdvanceCam
                andi.b  #%10000000,(joypadPress).w
                beq.w   .MainLoop
                btst    #6,joypad.w
                beq.w   _titleStartGame
                moveq   #2,d0
                bsr.w   PalLoad
                lea     hscrollTable.w,a1
                moveq   #0,d0
                move.w  #224-1,d1

.ClearHScroll:                         
                move.l  d0,(a1)+
                dbf     d1,.ClearHScroll
                move.l  d0,(vdpPlaneAPosY).w
                move    #$2700,sr
                lea     (VDPDATA).l,a6
                move.l  #$60000003,(VDPCTRL).l ; DO_WRITE_TO_VRAM_AT_$E000_ADDR
                                        ; DO_OPERATION_WITHOUT_DMA
                move.w  #$3FF,d1

.ClearBG:                              
                move.l  d0,(a6)
                dbf     d1,.ClearBG
                bsr.w   _lvlselectTextLoad


; =============== S U B R O U T I N E =======================================


LevelSelect:                            
                move.b  #vbID_TITLE,(vblankCmd).w
                bsr.w   VSync
                bsr.w   _lvlselectControl
                bsr.w   ProcessArtLoading
                tst.l   (decompQueue).w
                bne.s   LevelSelect
                andi.b  #%11110000,(joypadPress).w
                beq.s   LevelSelect
                move.w  (lvlselCurItem).w,d0
                cmpi.w  #$13,d0
                bne.s   .ProcessCurrentSelection
                move.w  (lvlselCurSound).w,d0
                addi.w  #$80,d0
                cmpi.w  #$93,d0
                bcs.s   .Skip
                cmpi.w  #$A0,d0
                bcs.s   LevelSelect

.Skip:                                 
                bsr.w   QueueSoundB
                bra.s   LevelSelect
; ---------------------------------------------------------------------------

.ProcessCurrentSelection:              
                add.w   d0,d0
                move.w  .LevelIDs(pc,d0.w),d0
                bmi.s   LevelSelect
                cmpi.w  #$700,d0
                bne.s   .IsLevel
                move.b  #GmID.SPECIAL,(gamemode).w
                rts
; ---------------------------------------------------------------------------

.IsLevel:                              
                andi.w  #$3FFF,d0
                btst    #4,(joypad).w
                beq.s   .DoSelectedAct
                move.w  #act4,d0        ; Set to act 4 if A is held

.DoSelectedAct:                        
                move.w  d0,(zone).w

_titleStartGame:                        
                move.b  #GmID.LEVEL,(gamemode).w
                move.b  #3,(lives).w
                moveq   #0,d0
                move.w  d0,(rings).w
                move.l  d0,(time).w
                move.l  d0,(score).w
                move.b  #sndCMD_Stop,d0
                bsr.w   QueueSoundB
                rts
; ---------------------------------------------------------------------------
.LevelIDs:
                dc.w   0,  1,  2
                dc.w $100,$101,$102
                dc.w $200,$201,$202
                dc.w $300,$301,$302
                dc.w $400,$401,$402
                dc.w $500,$501,$8500
                dc.w $700,$700,$8000
; ---------------------------------------------------------------------------

_titleAdvanceCam:                       
                move.w  #30,(genericTimer).w

.CheckIfReady:                         
                move.b  #vbID_TITLE,(vblankCmd).w
                bsr.w   VSync
                bsr.w   Parallax
                bsr.w   CyclePalettes
                bsr.w   ProcessArtLoading
                move.w  (objSlot00+obj.X).w,d0
                addq.w  #2,d0
                move.w  d0,(objSlot00+obj.X).w
                cmpi.w  #$1C00,d0
                bcs.s   .StartDemo
                move.b  #GmID.LOGO,(gamemode).w
                rts
; ---------------------------------------------------------------------------

.StartDemo:                            
                tst.w   (genericTimer).w
                bne.w   .CheckIfReady
                move.b  #sndCMD_Stop,d0
                bsr.w   QueueSoundB
                move.w  (demoCurLevel).w,d0
                andi.w  #7,d0
                add.w   d0,d0
                move.w  Demo_LevelOrder(pc,d0.w),d0
                move.w  d0,(zone).w
                addq.w  #1,(demoCurLevel).w
                cmpi.w  #6,(demoCurLevel).w
                bcs.s   .DoLevelDemo
                move.w  #0,(demoCurLevel).w

.DoLevelDemo:                          
                move.w  #1,(demo).w
                move.b  #GmID.DEMO,(gamemode).w
                cmpi.w  #$600,d0
                bne.s   .ClearLevelVars
                move.b  #GmID.SPECIAL,(gamemode).w

.ClearLevelVars:                       
                move.b  #3,(lives).w
                moveq   #0,d0
                move.w  d0,(rings).w
                move.l  d0,(time).w
                move.l  d0,(score).w
                rts
; End of function LevelSelect

; ---------------------------------------------------------------------------
Demo_LevelOrder:
                dc.w $000
                dc.w $600
                dc.w $200
                dc.w $600
                dc.w $400
                dc.w $600
                dc.w $300
                dc.w $600
                dc.w $200
                dc.w $600
                dc.w $400
                dc.w $600

; =============== S U B R O U T I N E =======================================


_lvlselectControl:                      
                move.b  (joypadPress).w,d1
                andi.b  #%11,d1
                bne.s   loc_28B6
                subq.w  #1,(lvlselCurTimer).w
                bpl.s   loc_28F0

loc_28B6:                               
                move.w  #11,(lvlselCurTimer).w
                move.b  (joypad).w,d1
                andi.b  #%11,d1
                beq.s   loc_28F0
                move.w  (lvlselCurItem).w,d0
                btst    #0,d1
                beq.s   .NoUpPress
                subq.w  #1,d0
                bcc.s   .NoUpPress
                moveq   #19,d0

.NoUpPress:                            
                btst    #1,d1
                beq.s   .NoDwnPress
                addq.w  #1,d0
                cmpi.w  #20,d0
                bcs.s   .NoDwnPress
                moveq   #0,d0

.NoDwnPress:                           
                move.w  d0,(lvlselCurItem).w
                bsr.w   _lvlselectTextLoad
                rts
; ---------------------------------------------------------------------------

loc_28F0:                               
                cmpi.w  #19,(lvlselCurItem).w
                bne.s   .Exit
                move.b  (joypadPress).w,d1
                andi.b  #%1100,d1
                beq.s   .Exit
                move.w  (lvlselCurSound).w,d0
                btst    #2,d1
                beq.s   .NoLeftPress
                subq.w  #1,d0
                bcc.s   .NoLeftPress
                moveq   #$4F,d0 

.NoLeftPress:                          
                btst    #3,d1
                beq.s   .NoRightPress
                addq.w  #1,d0
                cmpi.w  #$50,d0 
                bcs.s   .NoRightPress
                moveq   #0,d0

.NoRightPress:                         
                move.w  d0,(lvlselCurSound).w
                bsr.w   _lvlselectTextLoad

.Exit:                                 
                rts
; End of function _lvlselectControl


; =============== S U B R O U T I N E =======================================


_lvlselectTextLoad:                     

lvlselectTEXTPOS=  $62100003

                lea     (StageSelectText).l,a1
                lea     (VDPDATA).l,a6
                move.l  #lvlselectTEXTPOS,d4 ; DO_WRITE_TO_VRAM_AT_$E210_ADDR
                                        ; DO_OPERATION_WITHOUT_DMA
                move.w  #$E680,d3
                moveq   #$13,d1

.DrawLoop:                             
                move.l  d4,4(a6)
                bsr.w   .HighlightText
                addi.l  #$800000,d4
                dbf     d1,.DrawLoop
                moveq   #0,d0
                move.w  (lvlselCurItem).w,d0
                move.w  d0,d1
                move.l  #$62100003,d4
                lsl.w   #7,d0
                swap    d0
                add.l   d0,d4
                lea     (StageSelectText).l,a1
                lsl.w   #3,d1
                move.w  d1,d0
                add.w   d1,d1
                add.w   d0,d1
                adda.w  d1,a1
                move.w  #$C680,d3
                move.l  d4,4(a6)
                bsr.w   .HighlightText
                move.w  #$E680,d3
                cmpi.w  #$13,(lvlselCurItem).w
                bne.s   .DrawSoundTest
                move.w  #$C680,d3

.DrawSoundTest:                        
                move.l  #$6BB00003,(VDPCTRL).l ; DO_WRITE_TO_VRAM_AT_$EBB0_ADDR
                                        ; DO_OPERATION_WITHOUT_DMA
                move.w  (lvlselCurSound).w,d0
                addi.w  #$80,d0
                move.b  d0,d2
                lsr.b   #4,d0
                bsr.w   .NybbleToTxtCode
                move.b  d2,d0
                bsr.w   .NybbleToTxtCode
                rts
; ---------------------------------------------------------------------------

.NybbleToTxtCode:                      
                andi.w  #$F,d0
                cmpi.b  #$A,d0
                bcs.s   .Is1Thru9
                addi.b  #7,d0           ; skip over 7 characters in art data

.Is1Thru9:                             
                add.w   d3,d0
                move.w  d0,(a6)
                rts
; ---------------------------------------------------------------------------

.HighlightText:                        
                moveq   #24-1,d2

.Loop:                                 
                moveq   #0,d0
                move.b  (a1)+,d0
                bpl.s   .NotSpace
                move.w  #0,(a6)
                dbf     d2,.Loop
                rts
; ---------------------------------------------------------------------------

.NotSpace:                             
                add.w   d3,d0
                move.w  d0,(a6)
                dbf     d2,.Loop
                rts

; ---------------------------------------------------------------------------

StageSelectText:
        dc.b _G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_1,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_3,__
        dc.b _L,_A,_B,_Y,_R,_I,_N,_T,_H,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_1,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_3,__
        dc.b _M,_A,_R,_B,_L,_E,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_3,__
        dc.b _S,_T,_A,_R,__,_L,_I,_G,_H,_T,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_1,_X
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2,_X
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_3,_X
        dc.b _S,_P,_A,_R,_K,_L,_I,_N,_G,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_1,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_3,__
        dc.b _C,_L,_O,_C,_K,__,_W,_O,_R,_K,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_1,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2,__
        dc.b __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_3,_X
        dc.b _S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E,__,__,__,__,__,__,__,__,__,__,__
        dc.b _S,_O,_U,_N,_D,__,_S,_E,_L,_E,_C,_T,__,__,__,__,__,__,__,__,__,__,__,__